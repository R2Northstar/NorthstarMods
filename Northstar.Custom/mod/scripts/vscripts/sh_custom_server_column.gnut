#if CLIENT
global function ColumnData_Init
#endif //CLIENT

#if SERVER
global function AddServerScoreboardColumn
global function ServerColumsInit
global function AddServerScoreboardColumnAtRunntime
#endif //SERVER

global table<string,int> gamemodeColumns = {
    //matches the GAMETYPE string the amount of vanilla columns they have 
    [GAMEMODE_CHAMBER] =  2, //One in the chamber
    [GAMEMODE_FASTBALL] = 3, //Fatball
    [GAMEMODE_GG] = 2, //Gun Game
    [GAMEMODE_HIDDEN] = 2, //Hidden
    [GAMEMODE_HIDEANDSEEK] = 0, //Hide and seek
    [GAMEMODE_INFECTION] = 1, //infection
    [GAMEMODE_KR] = 2, // killrace
    [GAMEMODE_SNS] = 3, //Sticks and stones
    [GAMEMODE_TFFA] = 2, //Titan free for all
    [GAMEMODE_CTF_COMP] = 4, //competetive capture the flag
    [GAMEMODE_TT] = 3 , //Titan tag
    ["cp"] = 3, //amped hardpoint
    ["lts"] = 2, //last titan standing
    ["aitdm"] =  3, //attrition
    ["tdm"] = 3,  //skrimish
    ["coliseum"] = 1 , //coliseum
    ["ctf"] = 3, // catpture the flag
    ["ffa"] = 3, //free for all
    ["speedball"] = 3, //live fire
    ["ttdm"] = 3  //titan brawl
}


#if CLIENT

void function ColumnData_Init()
{
    AddServerToClientStringCommandCallback( "AddColumnToClient", ServerCallback_AddColumnToClient )
}

void function ServerCallback_AddColumnToClient( array<string> args )
{
    GameMode_AddScoreboardColumnData( args[0], RetrunSpace(args[1]), args[2].tointeger(), args[3].tointeger() )
}

#endif //CLIENT

#if SERVER

struct ColumnData{
    string gamemode
    string scoreName 
    int scoreType
    int digits
}

array<ColumnData> columns

void function ServerColumsInit()
{
    AddCallback_OnClientConnected( AddColumnOnConnect )
}

void function AddServerScoreboardColumn(string scoreName, int scoreType, int digits)
{   
    if(GAMETYPE in gamemodeColumns && gamemodeColumns[GAMETYPE] + columns.len() >= 4) // this just checks if there are already 4 columns
        return
    //Looks terrible, but this is the only way to define a struct in a function with args
    ColumnData column = {...}
    column.gamemode = GAMETYPE // GAMETYPE returns a string identifier like "gg" for gun game
    column.scoreName = ReplaceSpace(scoreName)
    column.scoreType = scoreType
    column.digits = digits

    columns.append(column)
}

void function AddColumnOnConnect(entity player)
{
    //adds all the registered columns when a player connects
    foreach(ColumnData cdat in columns)
	    ServerToClientStringCommand(player,"AddColumnToClient " + cdat.gamemode + " " + cdat.scoreName + " " +cdat.scoreType+ " " + cdat.digits)
}

void function AddServerScoreboardColumnAtRunntime(string scoreName, int scoreType, int digits)
{
    AddServerScoreboardColumn(scoreName, scoreType, digits) // for everyone who joins later 
    if(GAMETYPE in gamemodeColumns && gamemodeColumns[GAMETYPE] + columns.len() >= 4) // this just checks if there are already 4 columns
        return 

    foreach(entity p in GetPlayerArray())
        ServerToClientStringCommand(p,"AddColumnToClient " + GAMETYPE + " " + ReplaceSpace(scoreName) + " " + scoreType+ " " + digits)
}

#endif //SERVER

// shared functions
string function ReplaceSpace(string s)
{
    return StringReplace(s," ","x!c",true, true) //used as a replacement for string, as the args are seperated by spaces, this later gets reverted
}
string function RetrunSpace(string s)
{
    return StringReplace(s,"x!c"," ",true, true)
}