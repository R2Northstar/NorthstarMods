#if SERVER
global function NSServerDialogInit
global function NSSendServerDialog
global function NSSendMessageServerDialog
global function NSAddDialogButton
#elseif CLIENT
global function NSServerDialogueOnClientInit
#elseif UI
global function NSClientCallback_RequestDialog
#endif

const string StringCommandName = "ServerDialogSend"

#if SERVER

struct  {
    table< entity, array< void functionref( entity ) > > playerButtonCallBack // array for each button
} file

global struct ServerDialogButtonData
{
    void functionref( entity ) callback
    string text
}

global struct ServerDialogData
{
    // var menu // cut no idea how this would work
    string header = " "
    string message = " "
    // DialogMessageRuiData &ruiMessage

    array<int> messageColor = [161, 161, 161, 255] 
    string image = "."
    string rightImage = "."
    bool forceChoice = false
    bool noChoice = false
    bool noChoiceWithNavigateBack = false
    bool showSpinner = false
    bool showPCBackButton = true
    float inputDisableTime = 0
    // table<int,bool> coloredButton
    bool darkenBackground = false
    bool useFullMessageHeight = false

    array<ServerDialogButtonData> buttonData
    // array<DialogFooterData> footerData // controller stuff?
}

void function NSServerDialogInit()
{
    AddClientCommandCallback( "ns_button_dialog", ClientCommand_Button_Clicked )
    AddCallback_OnClientConnected( _AddPlayerToCallbackTable )
}

void function _ResetPlayerButtonCallBacks( entity player )
{
    file.playerButtonCallBack[player].clear()
}

void function _AddPlayerButtonCallBack( entity player, void functionref( entity ) callback )
{
    file.playerButtonCallBack[player].append( callback )
}

void function _AddPlayerToCallbackTable( entity player )
{
    file.playerButtonCallBack[player] <- []
}

void function NSSendServerDialog( entity player, ServerDialogData dialog )
{
    array<string> args

    args.append( StringReplace( dialog.header, " ", "/s", true, true ) )
    args.append( StringReplace( StringReplace(dialog.message, "\n", "!x1ba",true, true), " ", "/s", true, true ) )
    args.append( dialog.image )
    args.append( dialog.rightImage )
    args.append( dialog.forceChoice.tointeger().tostring() )
    args.append( dialog.noChoice.tointeger().tostring() )
    args.append( dialog.noChoiceWithNavigateBack.tointeger().tostring() )
    args.append( dialog.showSpinner.tointeger().tostring() )
    args.append( dialog.showPCBackButton.tointeger().tostring() )
    args.append( dialog.inputDisableTime.tostring() )
    args.append( dialog.darkenBackground.tointeger().tostring() )
    args.append( dialog.useFullMessageHeight.tointeger().tostring() )

    _ResetPlayerButtonCallBacks( player )

    for( int i; i < dialog.buttonData.len() && i < 4; i++ )
    {
        args.append( StringReplace( dialog.buttonData[i].text, " ", "/s", true, true ) )
        _AddPlayerButtonCallBack( player, dialog.buttonData[i].callback )
    }

    while( args.len() < 16 ) // this wouldn't add buttons but I added it so the array len stays the same
        args.append( "." )

    dialog.messageColor.resize( 4, 100 )
    array<string> colors
    foreach(color in dialog.messageColor )
        colors.append( string(color) )
    args.append( StringReplace( _CombineStringArray( colors), " ", "/s", true, true ) ) // replace spaces with /s too
    // args.append( _CombineStringArray( colors) )

    string snd_msg = _CombineStringArray( args, StringCommandName )

    printt( snd_msg ) // debugging

    ServerToClientStringCommand( player, snd_msg )
}

string function _CombineStringArray( array<string> strArray, string outStr = "" )
{
    foreach( string str in strArray )
    {
        outStr = format( "%s %s", outStr, str )
    }

    return outStr
}

void function NSSendMessageServerDialog( entity player, string message )
{
    ServerDialogData dialog
    dialog.message = message
    NSSendServerDialog( player, dialog )
}

void function NSAddDialogButton( ServerDialogData dialog, string text, void functionref( entity ) callback )
{
    ServerDialogButtonData button
    button.text = text
    button.callback = callback
    dialog.buttonData.append( button )
}

bool function ClientCommand_Button_Clicked( entity player, array<string> args )
{
    if ( !IsValid( player ) || args.len() != 1 || args[0].tointeger() < 0 || args[0].tointeger() > 3 )
        return false

    int index = args[0].tointeger()

    if ( !( player in file.playerButtonCallBack ) || file.playerButtonCallBack[player].len() < index + 1  )
        return true

    file.playerButtonCallBack[ player ][ index ]( player )

    return true
}

#elseif CLIENT

void function NSServerDialogueOnClientInit()
{
    AddServerToClientStringCommandCallback( StringCommandName, ServerCallback_DialogueRequestReceived )
}

//  string header
//  string message
//  string image
//  string rightImage
//  bool forceChoice
//  bool noChoice
//  bool noChoiceWithNavigateBack
//  bool showSpinner
//  bool showPCBackButton
//  float inputDisableTime
//  bool darkenBackground
//  bool useFullMessageHeigh

//  array<ServerDialogButtonData> buttonData
//  the long array is in this order

void function ServerCallback_DialogueRequestReceived( array<string> args )
{
    printt("stuff")

    foreach( string uym in args )
        printt( uym )
    
    string header = StringReplace( args[0], "/s", " ", true, true )

    string message = StringReplace( StringReplace(args[1], "!x1ba", "\n" ,true, true), "/s", " ", true, true )

    string image = args[2]
    string rightImage = args[3]
    bool forceChoice = args[4].tointeger() == 1
    bool noChoice = args[5].tointeger()  == 1
    bool noChoiceWithNavigateBack = args[6].tointeger() == 1
    bool showSpinner = args[7].tointeger() == 1
    bool showPCBackButton = args[8].tointeger() == 1
    float inputDisableTime = args[9].tofloat()
    bool darkenBackground = args[10].tointeger() == 1
    bool useFullMessageHeight = args[11].tointeger() == 1

    string button0Text = StringReplace( args[12], "/s", " ", true, true )
    string button1Text = StringReplace( args[13], "/s", " ", true, true )
    string button2Text = StringReplace( args[14], "/s", " ", true, true )
    string button3Text = StringReplace( args[15], "/s", " ", true, true )

    // // array<string> colors = split( args[16], "/s" )
    // string colorsStr = args[16]

    // // foreach( string uym in colors )
    // //     printt( uym )
    
    // // int colour_r = int(colors[0])
    // // int colour_g = int(colors[1])
    // // int colour_b = int(colors[2])
    // // int colour_a = int(colors[3])

    // // int colour_r = int(args[16])
    // // int colour_g = int(args[17])
    // // int colour_b = int(args[18])
    // // int colour_a = int(args[19])

    array<string> colors = split( args[16], "/s" )
    
    foreach( string uym in colors )
        printt( uym )
    
    int colour_r = 161
    int colour_g = 161
    int colour_b = 161
    int colour_a = 255

    try
    {
        colour_r = colors[0].tointeger()
        colour_g = colors[1].tointeger()
        colour_b = colors[2].tointeger()
        colour_a = colors[3].tointeger()
    }
    catch (err)
    {
        printt("failed int cast; using default colors ;", err)
    }

    printt("stuff")

    RunUIScript( 
        "NSClientCallback_RequestDialog",
        header,
        message,
        image,
        rightImage,
        forceChoice,
        noChoice,
        noChoiceWithNavigateBack,
        showSpinner,
        showPCBackButton,
        inputDisableTime,
        darkenBackground,
        useFullMessageHeight,
        button0Text,
        button1Text,
        button2Text,
        button3Text,
        colour_r,
        colour_g,
        colour_b,
        colour_a
    )

    // RunUIScript( 
    //     "NSClientCallback_RequestDialog",
    //     header,
    //     message,
    //     image,
    //     rightImage,
    //     forceChoice,
    //     noChoice,
    //     noChoiceWithNavigateBack,
    //     showSpinner,
    //     showPCBackButton,
    //     inputDisableTime,
    //     darkenBackground,
    //     useFullMessageHeight,
    //     button0Text,
    //     button1Text,
    //     button2Text,
    //     button3Text,
    //     colorsStr
    // )
}

#elseif UI



void function NSClientCallback_RequestDialog( string header, string message, string image, string rightImage, bool forceChoice, bool noChoice, bool noChoiceWithNavigateBack, bool showSpinner, bool showPCBackButton, float inputDisableTime, bool darkenBackground, bool useFullMessageHeight, string button0Text, string button1Text, string button2Text, string button3Text, int colour_r, int colour_g, int colour_b, int colour_a )
// void function NSClientCallback_RequestDialog( string header, string message, string image, string rightImage, bool forceChoice, bool noChoice, bool noChoiceWithNavigateBack, bool showSpinner, bool showPCBackButton, float inputDisableTime, bool darkenBackground, bool useFullMessageHeight, string button0Text, string button1Text, string button2Text, string button3Text, string colorsStr )
// void function NSClientCallback_RequestDialog( string header, string message, string image, string rightImage, bool forceChoice, bool noChoice, bool showSpinner, bool showPCBackButton, float inputDisableTime, bool darkenBackground, bool useFullMessageHeight, string button0Text, string button1Text, string button2Text, string button3Text, string colorsStr )
{   
    printt("stuff2")

    if ( uiGlobal.activeMenu != null )
        return
    
    // array<string> colors = split( colorsStr, "/s" )
    
    // foreach( string uym in colors )
    //     printt( uym )
    
    // int colour_r = 161
    // int colour_g = 161
    // int colour_b = 161
    // int colour_a = 255
    
    // try
    // {
    //     colour_r = colors[0].tointeger()
    //     colour_g = colors[1].tointeger()
    //     colour_b = colors[2].tointeger()
    //     colour_a = colors[3].tointeger()
    // }
    // catch (err) 
    // {
    //     printt("failed int cast; using default colors ;", err)
    // }
    
    // thread PAIN(
    //     header,
    //     message,
    //     image,
    //     rightImage,
    //     forceChoice,
    //     noChoice,
    //     // noChoiceWithNavigateBack,
    //     false,
    //     showSpinner,
    //     showPCBackButton,
    //     inputDisableTime,
    //     darkenBackground,
    //     useFullMessageHeight,
    //     button0Text,
    //     button1Text,
    //     button2Text,
    //     button3Text,
    //     colour_r,
    //     colour_g,
    //     colour_b,
    //     colour_a
    // )

    printt("stuff")

    DialogData dialogData

    dialogData.header = header
    dialogData.message = message
    
    if ( image.find("/") != null )
        dialogData.image = StringToAsset( image )
    if ( rightImage.find("/") != null )
        dialogData.rightImage = StringToAsset( rightImage )

    dialogData.forceChoice = forceChoice
    dialogData.noChoice = noChoice
    dialogData.noChoiceWithNavigateBack = noChoiceWithNavigateBack
    dialogData.showSpinner = showSpinner
    dialogData.showPCBackButton = showPCBackButton
    dialogData.inputDisableTime = inputDisableTime
    dialogData.darkenBackground = darkenBackground
    dialogData.useFullMessageHeight = useFullMessageHeight


    dialogData.messageColor = [colour_r, colour_g, colour_b, colour_a]

    if ( button0Text != "." )
        AddDialogButton( dialogData, Localize(button0Text), Button0_Callback ) // max is 4 buttons
    if ( button1Text != "." )
        AddDialogButton( dialogData, Localize(button1Text), Button1_Callback )
    if ( button2Text != "." )
        AddDialogButton( dialogData, Localize(button2Text), Button2_Callback )
    if ( button3Text != "." )
        AddDialogButton( dialogData, Localize(button3Text), Button3_Callback )


    OpenDialog( dialogData )

    printt("stuff")
}

void function PAIN( string header, string message, string image, string rightImage, bool forceChoice, bool noChoice, bool noChoiceWithNavigateBack, bool showSpinner, bool showPCBackButton, float inputDisableTime, bool darkenBackground, bool useFullMessageHeight, string button0Text, string button1Text, string button2Text, string button3Text, int colour_r, int colour_g, int colour_b, int colour_a )
{   
    wait 1

    printt("stuff")

    if ( uiGlobal.activeMenu != null )
        return
    
    printt("stuff")

    DialogData dialogData

    dialogData.header = header
    dialogData.message = message
    
    if ( image.find("/") != null )
        dialogData.image = StringToAsset( image )
    if ( rightImage.find("/") != null )
        dialogData.rightImage = StringToAsset( rightImage )

    dialogData.forceChoice = forceChoice
    dialogData.noChoice = noChoice
    dialogData.noChoiceWithNavigateBack = false
    dialogData.showSpinner = showSpinner
    dialogData.showPCBackButton = showPCBackButton
    dialogData.inputDisableTime = inputDisableTime
    dialogData.darkenBackground = darkenBackground
    dialogData.useFullMessageHeight = useFullMessageHeight


    dialogData.messageColor = [colour_r, colour_g, colour_b, colour_a]

    if ( button0Text != "." )
        AddDialogButton( dialogData, Localize(button0Text), Button0_Callback ) // max is 4 buttons
    if ( button1Text != "." )
        AddDialogButton( dialogData, Localize(button1Text), Button1_Callback )
    if ( button2Text != "." )
        AddDialogButton( dialogData, Localize(button2Text), Button2_Callback )
    if ( button3Text != "." )
        AddDialogButton( dialogData, Localize(button3Text), Button3_Callback )


    OpenDialog( dialogData )

    printt("stuff")
}

void function Button0_Callback()
{
    ClientCommand( "ns_button_dialog 0" )
}

void function Button1_Callback()
{
    ClientCommand( "ns_button_dialog 1" )
}

void function Button2_Callback()
{
    ClientCommand( "ns_button_dialog 2" )
}

void function Button3_Callback()
{
    ClientCommand( "ns_button_dialog 3" )
}

#endif
