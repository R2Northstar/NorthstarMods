// note: this is technically vanilla content, since bleedout was shipped with retail, but it needs custom remote functions which would break vanilla compatiblity, so it's not in Northstar.CustomServers
// idk why bleedout was even shipped in retail lmao
global function BleedoutDamage_PreInit
global function BleedoutDamage_Init
global function SetShouldPlayerStartBleedoutFunc
global function Bleedout_SetDownedGracePeriodEnabled
global function Bleedout_SetDownedGracePeriodDuration

struct {
	array<entity> bleedingPlayers // this is in _bleedout already, but it doesn't expose a way to track it, so we have to track it ourselves
	bool functionref( entity, var ) shouldPlayerStartBleedoutFunc = null

	// settings
	bool bleedoutGracePeriodEnabled = true
	float bleedoutGracePeriodDuration = 0.5
} file

void function BleedoutDamage_PreInit()
{
	AddCallback_OnRegisteringCustomNetworkVars( Bleedout_RegisterRemoteFunctions )
	
	// register signals here to avoid issue
	RegisterSignal( "BleedOut_StopBleeding" )
	RegisterSignal( "BleedOut_OnRevive" )
	RegisterSignal( "BleedOut_OnStartDying" )
	RegisterSignal( "OnContinousUseStopped" )

	// modifed signal
	RegisterSignal( "Bleedout_PlayerAttemptRes" )
	RegisterSignal( "Bleedout_OnStartReviving" )
	
	#if CLIENT
		// because playlist var overrides fucking suck, they aren't actually updated by this point
		// client bleedout can be inited late enough that we can just init it on local player spawn
		AddCallback_LocalClientPlayerSpawned( InitClientBleedoutForLocalPlayer )
	#endif
}

void function Bleedout_RegisterRemoteFunctions()
{
	Remote_RegisterFunction( "ServerCallback_BLEEDOUT_StartFirstAidProgressBar" )
	Remote_RegisterFunction( "ServerCallback_BLEEDOUT_StopFirstAidProgressBar" )
	Remote_RegisterFunction( "ServerCallback_BLEEDOUT_ShowWoundedMarker" )
	Remote_RegisterFunction( "ServerCallback_BLEEDOUT_HideWoundedMarker" )
}

// copied from sh_bleedout
const float DEFAULT_BLEEDOUT_TIME = 30.0
const float DEFAULT_FIRSTAID_TIME = 3.0
const float DEFAULT_FIRSTAID_TIME_SELF = -1.0
const float DEFAULT_FIRSTAID_HEAL_PERCENT = 1.0
const float DEFAULT_AI_BLEEDING_PLAYER_MISS_CHANCE = 0.0
const bool DEFAULT_FORCE_WEAPON_HOLSTER = false
const bool DEFAULT_DEATH_ON_TEAM_BLEEDOUT = false

void function BleedoutDamage_Init()
{
	AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_BLEEDOUT", "riff_player_bleedout", [ "#SETTING_DISABLED", "#SETTING_DEFAULT", "#SETTING_ENABLED" ], "0" )
	AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_BLEEDOUT", "player_bleedout_forceHolster", [ "#SETTING_DISABLED", "#SETTING_ENABLED" ], DEFAULT_FORCE_WEAPON_HOLSTER.tostring() )
	AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_BLEEDOUT", "player_bleedout_forceDeathOnTeamBleedout", [ "#SETTING_DISABLED", "#SETTING_ENABLED" ], DEFAULT_DEATH_ON_TEAM_BLEEDOUT.tostring() )
	AddPrivateMatchModeSettingArbitrary( "#MODE_SETTING_CATEGORY_BLEEDOUT", "player_bleedout_bleedoutTime", DEFAULT_BLEEDOUT_TIME.tostring() )
	AddPrivateMatchModeSettingArbitrary( "#MODE_SETTING_CATEGORY_BLEEDOUT", "player_bleedout_firstAidTime", DEFAULT_FIRSTAID_TIME.tostring() )
	AddPrivateMatchModeSettingArbitrary( "#MODE_SETTING_CATEGORY_BLEEDOUT", "player_bleedout_firstAidTimeSelf", DEFAULT_FIRSTAID_TIME_SELF.tostring() )
	AddPrivateMatchModeSettingArbitrary( "#MODE_SETTING_CATEGORY_BLEEDOUT", "player_bleedout_firstAidHealPercent", DEFAULT_FIRSTAID_HEAL_PERCENT.tostring() )
	AddPrivateMatchModeSettingArbitrary( "#MODE_SETTING_CATEGORY_BLEEDOUT", "player_bleedout_aiBleedingPlayerMissChance", DEFAULT_AI_BLEEDING_PLAYER_MISS_CHANCE.tostring() )
	
	#if CLIENT
		// manually register signals here: defensive fix so we don't crash
		RegisterSignal( "Bleedout_OnRevive" )
		RegisterSignal( "Bleedout_StopFirstAid" )
	#elseif SERVER
		// sh_riff_settings should set this correctly on server
		if ( !Riff_PlayerBleedout() )
			return
		
		AddDamageFinalCallback( "player", HandleDamageForBleedout ) // this can get player's real taken damage

		// default callback
		Bleedout_AddCallback_OnPlayerStartBleedout( OnPlayerBleedoutBegin )

		// dont init if scripts already inited it manually
		if ( !Bleedout_IsBleedoutLogicActive() )
		{
			InitSharedBleedoutWithPlaylistVars()
			Bleedout_Init()
		}
	#endif
}

void function SetShouldPlayerStartBleedoutFunc( bool functionref( entity, var ) func )
{
	file.shouldPlayerStartBleedoutFunc = func
}

// modified settings
void function Bleedout_SetDownedGracePeriodEnabled( bool enable )
{
	file.bleedoutGracePeriodEnabled = enable
}

void function Bleedout_SetDownedGracePeriodDuration( float duration )
{
	file.bleedoutGracePeriodDuration = duration
}

void function InitSharedBleedoutWithPlaylistVars()
{
	BleedoutShared_Init( 
		GetCurrentPlaylistVarFloat( "player_bleedout_bleedoutTime", DEFAULT_BLEEDOUT_TIME ),
		GetCurrentPlaylistVarFloat( "player_bleedout_firstAidTime", DEFAULT_FIRSTAID_TIME ),
		GetCurrentPlaylistVarFloat( "player_bleedout_firstAidTimeSelf", DEFAULT_FIRSTAID_TIME_SELF ),
		GetCurrentPlaylistVarFloat( "player_bleedout_firstAidHealPercent", DEFAULT_FIRSTAID_HEAL_PERCENT ),
		GetCurrentPlaylistVarFloat( "player_bleedout_aiBleedingPlayerMissChance", DEFAULT_AI_BLEEDING_PLAYER_MISS_CHANCE ),
		GetCurrentPlaylistVarInt( "player_bleedout_forceHolster", int( DEFAULT_FORCE_WEAPON_HOLSTER ) ) == 1,
		GetCurrentPlaylistVarInt( "player_bleedout_forceDeathOnTeamBleedout", int( DEFAULT_DEATH_ON_TEAM_BLEEDOUT ) ) == 1
	)
}

#if CLIENT
void function InitClientBleedoutForLocalPlayer( entity player )
{
	// dont init if bleedout is disabled or scripts already inited it
	if ( !Riff_PlayerBleedout() || Bleedout_IsBleedoutLogicActive() )
		return
	
	InitSharedBleedoutWithPlaylistVars()
	BleedoutClient_Init()
}
#endif

#if SERVER
void function HandleDamageForBleedout( entity player, var damageInfo )
{
	// doing a better check through _bleedout.gnut
	if ( IsInstantDeath( damageInfo ) || DamageInfo_GetForceKill( damageInfo ) || player.IsTitan() )	
		return

	// handling downed player damages
	if( Bleedout_IsPlayerBleeding( player ) )
	{
		if ( player.GetHealth() + player.GetShieldHealth() - DamageInfo_GetDamage( damageInfo ) <= 0 )
		{	
			entity attacker = DamageInfo_GetAttacker( damageInfo )
			entity realAttacker = Bleedout_GetLastAttacker( player )
			if( IsValid( attacker ) && IsValid( realAttacker ) ) // real attacker exists
			{
				if( realAttacker.IsPlayer() && attacker.IsPlayer() && realAttacker != player && realAttacker != attacker )
				{ // player is killed by other players, redirect score to knockdowner, can't handle executions!
					DamageInfo_SetDamage( damageInfo, player.GetHealth() - 1 )
					player.TakeDamage( player.GetMaxHealth() + 1, 
									   realAttacker, 
									   realAttacker, 
									   { // damage table
										weapon = Bleedout_GetLastAttackerWeapon( player ), // do this work? for supporting tactical_cdr_on_kill
										origin = DamageInfo_GetDamagePosition( damageInfo ), 
										force = DamageInfo_GetDamageForce( damageInfo ), 
										scriptType = DamageInfo_GetCustomDamageType( damageInfo ), 
										damageSourceId = eDamageSourceId.bleedout // proper damageSource for now
									   })
				}
			}
		}
		return // then codes below should handle "!Bleedout_IsPlayerBleeding( player )" conditions
	}
	
	if ( file.shouldPlayerStartBleedoutFunc != null )
	{
		if ( !file.shouldPlayerStartBleedoutFunc( player, damageInfo ) )
			return
	}
	else // not having a modified callback
	{
		// default one, check if damage would kill the player
		if ( player.GetHealth() - DamageInfo_GetDamage( damageInfo ) > 0 )
			return
	}
	
	// checks done, bleedout start functioning
	// for "Team Bleedout" Check
	bool canBleedout = Bleedout_StartPlayerBleedout( player, DamageInfo_GetAttacker( damageInfo ), damageInfo )
	if( !canBleedout ) // not resetting damage for last team player bleeding! let them being killed
		return

	// prevent player from dying, but if we set it to 0, player won't receive any knockback from damage source
	DamageInfo_SetDamage( damageInfo, player.GetHealth() - 1 ) // was reduce damage to 1, now damages player to 1 health
}

void function OnPlayerBleedoutBegin( entity player, entity victim, var damageInfo )
{
	if ( file.bleedoutGracePeriodEnabled ) // the sound is annoying, should leave a setting
		thread PlayerBleedoutGracePeriod( player )
}

void function PlayerBleedoutGracePeriod( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	
	EmitSoundOnEntityOnlyToPlayer( player, player, "Player_Death_Begin" )
	EnableDemigod( player ) // should use this instead of SetInvulnerable(), or player won't receive knockbacks
	OnThreadEnd( function() : ( player )
	{
		if ( IsValid( player ) )
		{
			if( IsDemigod( player ) )
				DisableDemigod( player )
			StopSoundOnEntity( player, "Player_Death_Begin" )
		}
	})
	
	wait file.bleedoutGracePeriodDuration
}
#endif