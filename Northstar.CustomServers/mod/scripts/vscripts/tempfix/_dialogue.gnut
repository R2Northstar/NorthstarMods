global function DialoguePlay_Init

// basically disabled in ffa modes
const array<string> DISABLED_MODES = ["fd", "mfd"]

const float LOSING_SMALL_PERCENTAGE = 0.2
const float LOSING_LARGE_PERCENTAGE = 0.4

table<string, int> dialogCount = {}
bool hasDetermindWinner = false
void function DialoguePlay_Init()
{
	if( IsFFAGame() || DISABLED_MODES.contains( GAMETYPE ) )
		return
	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_GameStateEnter( eGameState.Playing, OnGamePlaying )
	AddCallback_GameStateEnter( eGameState.WinnerDetermined, OnWinnerDetermined )
	AddCallback_OnPlayerKilled( OnPlayerKilled )
	AddCallback_OnNPCKilled( OnNPCKilled )
}

void function OnClientConnected( entity player )
{
	if( !(player.GetUID() in dialogCount) )
		dialogCount[player.GetUID()] <- 0
}

void function OnGamePlaying()
{
	if( !IsFFAGame() && !IsRoundBased() )
		thread DialoguePlayNormal()
}

void function OnWinnerDetermined()
{
	if( !IsRoundBased() )
	{
		DialoguePlayWinnerDetermined()
		hasDetermindWinner = true
	}
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
	if( attacker.IsPlayer() && victim.IsTitan() )
		KilledPlayerTitanDialogue( attacker, victim )
	if( IsFFAGame() )
		DialoguePlayScoreEvent()
}

void function OnNPCKilled( entity victim, entity attacker, var damageInfo )
{
	if( victim.GetBossPlayer() == attacker )
		return
	if( attacker.IsPlayer() && victim.IsTitan() && victim.GetBossPlayer() != null )
		KilledPlayerTitanDialogue( attacker, victim )
}

void function KilledPlayerTitanDialogue( entity attacker, entity victim )
{
	entity titan
	if ( victim.IsTitan() )
		titan = victim

	if( !IsValid( titan ) )
		return
	string titanCharacterName = GetTitanCharacterName( titan )

	if( RandomInt( 4 ) == 0 )
		PlayFactionDialogueToPlayer( "kc_pilotkilltitan", attacker )
	else
	{
		switch( titanCharacterName )
		{
			case "ion":
				PlayFactionDialogueToPlayer( "kc_pilotkillIon", attacker )
				return
			case "tone":
				PlayFactionDialogueToPlayer( "kc_pilotkillTone", attacker )
				return
			case "legion":
				PlayFactionDialogueToPlayer( "kc_pilotkillLegion", attacker )
				return
			case "scorch":
				PlayFactionDialogueToPlayer( "kc_pilotkillScorch", attacker )
				return
			case "ronin":
				PlayFactionDialogueToPlayer( "kc_pilotkillRonin", attacker )
				return
			case "northstar":
				PlayFactionDialogueToPlayer( "kc_pilotkillNorthstar", attacker )
				return
			default:
				PlayFactionDialogueToPlayer( "kc_pilotkilltitan", attacker )
				return
		}
	}
		
}

void function DialoguePlayNormal()
{
	int time = GameTime_TimeLimitSeconds()
	int score = GameMode_GetScoreLimit( GameRules_GetGameMode() )
	int winningTeam
	int losingTeam
	while( true )
	{
		if( hasDetermindWinner )
			return
		if( GameRules_GetTeamScore( TEAM_MILITIA ) < GameRules_GetTeamScore( TEAM_IMC ) )
		{
			winningTeam = TEAM_IMC
			losingTeam = TEAM_MILITIA
		}
		if( GameRules_GetTeamScore( TEAM_MILITIA ) > GameRules_GetTeamScore( TEAM_IMC ) )
		{
			winningTeam = TEAM_MILITIA
			losingTeam = TEAM_IMC
		}
		if( GameRules_GetTeamScore( winningTeam ) - GameRules_GetTeamScore( losingTeam ) >= score * LOSING_LARGE_PERCENTAGE )
		{
			PlayFactionDialogueToTeam( "scoring_winningLarge", winningTeam )
			PlayFactionDialogueToTeam( "scoring_losingLarge", losingTeam )
		}
		else if( GameRules_GetTeamScore( winningTeam ) - GameRules_GetTeamScore( losingTeam ) <= score * LOSING_SMALL_PERCENTAGE )
		{
			PlayFactionDialogueToTeam( "scoring_winningClose", winningTeam )
			PlayFactionDialogueToTeam( "scoring_losingClose", losingTeam )
		}
		else if( GameRules_GetTeamScore( winningTeam ) == GameRules_GetTeamScore( losingTeam ) )
		{
			PlayFactionDialogueToTeam( "scoring_flavor", winningTeam )
			PlayFactionDialogueToTeam( "scoring_flavor", losingTeam )
		}
		else
		{
			PlayFactionDialogueToTeam( "scoring_winning", winningTeam )
			PlayFactionDialogueToTeam( "scoring_losing", losingTeam )
		}

		if( time >= 1200 )
			wait time * 0.045
		else if( time >= 1080 )
			wait time * 0.08
		else if( time >= 720 )
			wait time * 0.09
		else if( time >= 600 )
			wait time * 0.12
		else if( time >= 300 )
			wait time * 0.15
		else
			return
	}
}

void function DialoguePlayWinnerDetermined()
{
	int score = GameMode_GetScoreLimit( GameRules_GetGameMode() )
	int winningTeam
	int losingTeam

	if( GameRules_GetTeamScore( TEAM_MILITIA ) < GameRules_GetTeamScore( TEAM_IMC ) )
	{
		winningTeam = TEAM_IMC
		losingTeam = TEAM_MILITIA
	}
	if( GameRules_GetTeamScore( TEAM_MILITIA ) > GameRules_GetTeamScore( TEAM_IMC ) )
	{
		winningTeam = TEAM_MILITIA
		losingTeam = TEAM_IMC
	}
	if( GameRules_GetTeamScore( winningTeam ) - GameRules_GetTeamScore( losingTeam ) >= score * LOSING_LARGE_PERCENTAGE )
	{
		PlayFactionDialogueToTeam( "scoring_wonMercy", winningTeam )
		PlayFactionDialogueToTeam( "scoring_lostMercy", losingTeam )
	}
	else if( GameRules_GetTeamScore( winningTeam ) - GameRules_GetTeamScore( losingTeam ) <= score * LOSING_SMALL_PERCENTAGE )
	{
		PlayFactionDialogueToTeam( "scoring_wonClose", winningTeam )
		PlayFactionDialogueToTeam( "scoring_lostClose", losingTeam )
	}
	else if( GameRules_GetTeamScore( winningTeam ) == GameRules_GetTeamScore( losingTeam ) )
	{
		PlayFactionDialogueToTeam( "scoring_tied", winningTeam )
		PlayFactionDialogueToTeam( "scoring_tied", losingTeam )
	}
	else
	{
		PlayFactionDialogueToTeam( "scoring_won", winningTeam )
		PlayFactionDialogueToTeam( "scoring_lost", losingTeam )
	}
}

void function DialoguePlayScoreEvent()
{
	int score = GameMode_GetScoreLimit( GameRules_GetGameMode() )
	entity bestplayer = GetWinningPlayer()
	int bestscore = GameRules_GetTeamScore( bestplayer.GetTeam() )
	float phasescore
	if( score >= 50 )
		phasescore = score * 0.25
	if( score >= 30 )
		phasescore = score * 0.4
	if( score >= 15 )
		phasescore = score * 0.7
	else
		return

	if( bestscore >= phasescore * (dialogCount[bestplayer.GetUID()] + 1) )
	{
		foreach( entity player in GetPlayerArray() )
		{
			if( GameRules_GetTeamScore( bestplayer.GetTeam() ) - GameRules_GetTeamScore( player.GetTeam() ) >= score * LOSING_LARGE_PERCENTAGE )
			{
				PlayFactionDialogueToTeam( "scoring_losingLarge", player.GetTeam() )
				dialogCount[player.GetUID()] += 1
			}
			else if( GameRules_GetTeamScore( bestplayer.GetTeam() ) - GameRules_GetTeamScore( player.GetTeam() ) <= score * LOSING_SMALL_PERCENTAGE )
			{
				PlayFactionDialogueToTeam( "scoring_losingClose", player.GetTeam() )
				dialogCount[player.GetUID()] += 1
			}
			else if( player != bestplayer )
			{
				PlayFactionDialogueToTeam( "scoring_losing", player.GetTeam() )
				dialogCount[player.GetUID()] += 1
			}
			else
			{
				PlayFactionDialogueToTeam( "scoring_winning", bestplayer.GetTeam() )
				dialogCount[bestplayer.GetUID()] += 1
			}
		}
	}
}

entity function GetWinningPlayer() 
{
	entity bestplayer

	foreach ( entity player in GetPlayerArray() )
	{
		if( bestplayer == null )
			bestplayer = player
		
		if( GameRules_GetTeamScore( player.GetTeam() ) > GameRules_GetTeamScore( bestplayer.GetTeam() ) )
			bestplayer = player
	}

	return bestplayer
}