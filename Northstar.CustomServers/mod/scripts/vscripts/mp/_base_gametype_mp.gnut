untyped
global function BaseGametype_Init_MPSP
global function CodeCallback_OnClientConnectionStarted
global function CodeCallback_OnClientConnectionCompleted
global function CodeCallback_OnClientDisconnected
global function CodeCallback_OnPlayerRespawned
global function CodeCallback_OnPlayerKilled
global function DecideRespawnPlayer
global function RespawnAsPilot
global function RespawnAsTitan
global function TryGameModeAnnouncement

global function SetKillcamsEnabled
global function KillcamsEnabled
global function SetPlayerDeathsHidden
global function TrackTitanDamageInPlayerGameStat

// I want my game to have this
global function SetPlayerRespawnForced
global function SetPlayerCameraToIntermissionCam

global function ShouldEntTakeDamage_SPMP
global function GetTitanBuildTime
global function TitanPlayerHotDropsIntoLevel

struct {
	bool killcamsEnabled = true
	bool playerDeathsHidden = false
	int titanDamageGameStat = -1
	
	entity intermissionCamera
	array<entity> specCams
	
	// modified
	bool forcedRespawn = true
	array<string> lateSpawnedPlayerUIDs = []
} file

void function BaseGametype_Init_MPSP()
{
	AddSpawnCallback( "info_intermission", SetIntermissionCamera )
	
	AddPostDamageCallback( "player", AddToTitanDamageStat )
	AddPostDamageCallback( "npc_titan", AddToTitanDamageStat )
	
	AddCallback_OnNPCKilled( CheckForAutoTitanDeath )
	AddCallback_OnPlayerKilled( CheckForAutoTitanDeath )

	RegisterSignal( "PlayerRespawnStarted" )
	RegisterSignal( "KillCamOver" )
}

void function SetIntermissionCamera( entity camera )
{
	file.intermissionCamera = camera
}

void function CodeCallback_OnClientConnectionStarted( entity player )
{
	// not a real player?
	#if DEV
	if ( player.GetPlayerName() == "Replay" )
		return
	#endif

	if ( IsLobby() )
	{
		Lobby_OnClientConnectionStarted( player )
		return
	}

//	ScreenFade( player, 0, 0, 0, 255, 2.0, 0.5, FFADE_IN | FFADE_PURGE )

	SetTargetName( player, "player" + player.entindex() )

	player.p.controllableProjectiles_scriptManagedID = CreateScriptManagedEntArray()
	player.p.npcFollowersArrayID = CreateScriptManagedEntArray()

	player.s = {}
	player.s.attackerInfo <- {}
	player.p.clientScriptInitialized = player.IsBot()
	player.s.inPostDeath <- null
	player.s.respawnCount <- 0
	player.s.respawnTime <- 0
	player.s.lostTitanTime <- 0
	player.s.cloakedShotsAllowed <- 0
	player.s.startDashMeleeTime <- 0
	player.s.respawnSelectionDone <- true  // this gets set to false in postdeaththread but we need it to be true when connecting
	player.s.waveSpawnProtection <- false

	player.s.nextStatUpdateFunc <- null

	player.s.activeTrapArrayId <- CreateScriptManagedEntArray()

	player.s.restartBurnCardEffectOnSpawn <- false
	player.s.replacementDropInProgress <- false

	player.s.inGracePeriod <- true

	// should I just add these when playing coop?
	player.s.usedLoadoutCrate <- false
	player.s.restockAmmoTime <- 0
	player.s.restockAmmoCrate <- null

	player.s.autoTitanLastEngageCalloutTime <- 0
	player.s.autoTitanLastEngageCallout <- null
	player.s.lastAIConversationTime <- {} // when was a conversation last played?

	player.s.updatedPersistenceOnDisconnect <- false

	player.s.lastFriendlySpawnedOn <- null
	player.s.nextWaveSpawnTime <- 0.0

	player.s.meleeSlowMoEndTime <- 0.0
	
	player.p.connectTime = Time()

	Assert( !player._entityVars )
	InitEntityVars( player )

	// Added via AddCallback_OnClientConnecting
	foreach ( callbackFunc in svGlobal.onClientConnectingCallbacks )
	{
		callbackFunc( player )
	}

	printl( "Player connect started: " + player + "---UID:" + player.GetUID() )
	
	InitPassives( player )
}

// playerconnected
void function CodeCallback_OnClientConnectionCompleted( entity player )
{
	InitPersistentData( player ) // defensive fix

	if ( IsLobby() )
	{
		Lobby_OnClientConnectionCompleted( player )
		return
	}

	player.hasConnected = true

	InitMeleeAnimEventCallbacks( player )
	ZiplineInit( player )
	
	UpdateMinimapStatus( player )
	UpdateMinimapStatusToOtherPlayers( player )
	MinimapPlayerConnected( player )
	NotifyClientsOfConnection( player, 1 )
	PlayCurrentTeamMusicEventsOnPlayer( player )
	SetCurrentTeamObjectiveForPlayer( player )

	entity skycam = GetEnt( "skybox_cam_level" )
	if ( skycam != null )
		player.SetSkyCamera( skycam )

	FinishClientScriptInitialization( player )

	// Added via AddCallback_OnClientConnected
	foreach ( callbackFunc in svGlobal.onClientConnectedCallbacks )
		callbackFunc( player )

	if ( !Flag( "PlayerDidSpawn") )
		__PlayerDidSpawn( player )

	svGlobal.levelEnt.Signal( "PlayerDidSpawn", { player = player } )

	if ( GetConVarBool( "ns_allow_spectators" ) )
	{
		if ( IsPrivateMatchSpectator( player ) )
		{
			InitialisePrivateMatchSpectatorPlayer( player )
			return
		}
	}
	else
		player.SetPersistentVar( "privateMatchState", 0 )

	// handle spawning late joiners
	if ( GetGameState() == eGameState.Playing )
	{
		bool connectingRespawned = false
		if ( RespawnsEnabled() )
		{
			// likely temp, deffo needs some work
			if ( Riff_SpawnAsTitan() == 1 )	// spawn as titan
				thread RespawnAsTitan( player )
			else // spawn as pilot
				RespawnAsPilot( player )
			connectingRespawned = true
		}
		else // may not be useful, just want to make dedicated servers better
		{
			bool shouldDoLateSpawn = false

			if( GetPlayerArrayOfTeam( player.GetTeam() ).len() <= 1 )
				shouldDoLateSpawn = true
			else if( !file.lateSpawnedPlayerUIDs.contains( player.GetUID() ) ) // avoid multiple late spawns by disconnecting
				shouldDoLateSpawn = true
			/*
			float endTime
			float gameTime
			if ( IsRoundBased() )
			{
				endTime = expect float( GetServerVar( "roundEndTime" ) )
				gameTime = GameMode_GetRoundTimeLimit( GAMETYPE ) * 60
			}
			else
			{
				endTime = expect float( GetServerVar( "gameEndTime" ) )
				gameTime = float( GameMode_GetTimeLimit( GAMETYPE ) ) * 60
			}
			
			else if( GetPlayerArrayOfTeam( player.GetTeam() ).len() > 1 )
				shouldDoLateSpawn = false
			else if( endTime - Time() < gameTime * 0.75 ) // early joiner can still be in elimination mode
				shouldDoLateSpawn = false
			*/

			// do this so player don't have to wait so long till round end
			if( shouldDoLateSpawn )
			{
				if ( Riff_SpawnAsTitan() == 1 )	// spawn as titan
					thread RespawnAsTitan( player )
				else // spawn as pilot
					RespawnAsPilot( player )
				connectingRespawned = true
				if( !file.lateSpawnedPlayerUIDs.contains( player.GetUID() ) )
					file.lateSpawnedPlayerUIDs.append( player.GetUID() )
			}
			else
				thread PlayerBecomesSpectator( player )
		}
		if( connectingRespawned )
			thread DelayedGamemodeAnnouncement( player )
	}
	else if ( GetGameState() >= eGameState.Playing && !RespawnsEnabled() )// don't know why northstar not handling these
		thread PlayerBecomesSpectator( player )
}

void function DelayedGamemodeAnnouncement( entity player )
{
	player.EndSignal( "OnDestroy" )
	
	if( !IsAlive( player ) )
		player.WaitSignal( "OnRespawned" )
	TryGameModeAnnouncement( player )
}

void function CodeCallback_OnClientDisconnected( entity player, string reason )
{
	if ( IsLobby() )
	{
		player.Signal( "_disconnectedInternal" )
		UpdateBadRepPresent()
		return
	}

	if ( !player.hasConnected )
		return

	// Added via AddCallback_OnClientDisconnected
	foreach ( callbackFunc in svGlobal.onClientDisconnectedCallbacks )
	{
		callbackFunc( player )
	}

	player.Disconnected()
	player.p.isDisconnected = true
	player.CleanupMPClasses()
}

void function CodeCallback_OnPlayerRespawned( entity player )
{
	SetHumanRagdollImpactTable( player )
	
	player.s.inGracePeriod = true // defensive fix
	player.s.respawnCount++
	player.s.respawnTime = Time()
	ClearRecentDamageHistory( player )
	
	player.Signal( "OnRespawned" ) // kill any postdeaththreads that could be running
	
	Loadouts_TryGivePilotLoadout( player )
	if( IsLoadoutGracePeriodEnabled() )
		GracePeriodThink( player ) // grace period done here
	//player.SetPredictionEnabled( true ) doesn't seem needed, as native code seems to set this
	
	foreach ( entity weapon in player.GetMainWeapons() )
		weapon.SetProScreenOwner( player )
		
	foreach ( void functionref( entity ) callback in svGlobal.onPlayerRespawnedCallbacks )
		callback( player )
		
	Remote_CallFunction_NonReplay( player, "ServerCallback_YouRespawned" )
	ClearLastAttacker( player ) // so dying to anything doesn't credit the same attacker after respawning
}

void function GracePeriodThink( entity player )
{
	thread GracePeriodThink_Threaded( player )
}

void function GracePeriodThink_Threaded( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnPrimaryAttack" )
	player.EndSignal( "OnDeath" )

	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
			{
				if( IsAlive( player ) && GetGameState() == eGameState.Playing ) // if player died we don't reset this( mostly because round end )
				{
					player.s.inGracePeriod = false
					player.Signal( "GracePeriodDone" )
				}
			}
		}
	)

	float countingTime
	while( countingTime <= CLASS_CHANGE_GRACE_PERIOD ) // to get exact time
	{
		wait 0.2
		// in dropship
		if( player.GetParent() != null && ( HasCinematicFlag( player, CE_FLAG_INTRO ) || HasCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) || HasCinematicFlag( player, CE_FLAG_WAVE_SPAWNING ) ) )
			continue

		countingTime += 0.2
	}
}

void function CodeCallback_OnPlayerKilled( entity player, var damageInfo )
{
	PlayerOrNPCKilled( player, damageInfo )
	HandleDeathPackage( player, damageInfo )
	thread PostDeathThread_MP( player, damageInfo )
}

void function PostDeathThread_MP( entity player, var damageInfo ) // based on gametype_sp: postdeaththread_sp
{
	if ( player.s.inPostDeath )
		return

	float timeOfDeath = Time()
	player.p.postDeathThreadStartTime = Time()

	Assert( IsValid( player ), "Not a valid player" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnRespawned" )

	player.p.deathOrigin = player.GetOrigin()
	player.p.deathAngles = player.GetAngles()

	player.s.inPostDeath = true
	player.s.inGracePeriod = true // make sure player always in GracePeriod after respawn
	player.s.respawnSelectionDone = false

	player.cloakedForever = false
	player.stimmedForever = false
	player.SetNoTarget( false )
	player.SetNoTargetSmartAmmo( false )
	player.ClearExtraWeaponMods()
	
	// disable prediction to prevent it messing with ragdoll in some places, as well as killreplay and such
	player.SetPredictionEnabled( false )
	
	if ( player.IsTitan() )
		SoulDies( player.GetTitanSoul(), damageInfo ) // cleanup some titan stuff, no idea where else to put this
	
	ClearRespawnAvailable( player )

	OnThreadEnd( function() : ( player )
	{
		if ( !IsValid( player ) )
			return
	
		player.s.inPostDeath = false
	})

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	int methodOfDeath = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	table<int, bool> alreadyAssisted
	if ( IsValid( attacker ) )
	{
		foreach( DamageHistoryStruct attackerInfo in player.e.recentDamageHistory )
		{
			if ( !IsValid( attackerInfo.attacker ) || !attackerInfo.attacker.IsPlayer() || attackerInfo.attacker == player )
				continue

			bool exists = attackerInfo.attacker.GetEncodedEHandle() in alreadyAssisted ? true : false
			if( attackerInfo.attacker != attacker && !exists )
			{
				alreadyAssisted[attackerInfo.attacker.GetEncodedEHandle()] <- true
				Remote_CallFunction_NonReplay( attackerInfo.attacker, "ServerCallback_SetAssistInformation", attackerInfo.damageSourceId, attacker.GetEncodedEHandle(), player.GetEncodedEHandle(), attackerInfo.time ) 
				AddPlayerScore( attackerInfo.attacker, "PilotAssist", player )
				attackerInfo.attacker.AddToPlayerGameStat( PGS_ASSISTS, 1 )
			}
		}

		if( attacker.IsPlayer() )	
			Highlight_SetDeathRecapHighlight( attacker, "killer_outline" )
	}

	player.p.rematchOrigin = player.p.deathOrigin
	if ( IsValid( attacker ) && methodOfDeath == eDamageSourceId.titan_execution )
	{
		// execution can throw you out of the map
		player.p.rematchOrigin = attacker.GetOrigin()
	}

	player.Signal( "RodeoOver" )
	player.ClearParent()
	
	// do some pre-replay stuff if we're gonna do a replay
	float replayLength = CalculateLengthOfKillReplay( player, methodOfDeath )
	bool shouldDoReplay = Replay_IsEnabled() && KillcamsEnabled() && IsValid( attacker ) && ShouldDoReplay( player, attacker, replayLength, methodOfDeath )
	table replayTracker = { validTime = null }
	if ( shouldDoReplay )
		thread TrackDestroyTimeForReplay( attacker, replayTracker )
	
	player.StartObserverMode( OBS_MODE_DEATHCAM )
	if ( ShouldSetObserverTarget( attacker ) )
		player.SetObserverTarget( attacker )
	else
		player.SetObserverTarget( null )
	
	if ( ( GamePlayingOrSuddenDeath() || GetGameState() == eGameState.Epilogue ) && !file.playerDeathsHidden )
		player.AddToPlayerGameStat( PGS_DEATHS, 1 )
	
	if ( !file.playerDeathsHidden )
		Remote_CallFunction_NonReplay( player, "ServerCallback_YouDied", attacker.GetEncodedEHandle(), GetHealthFrac( attacker ), methodOfDeath )

	float deathcamLength = GetDeathCamLength( player )
	wait deathcamLength
	
	/*
	if ( file.intermissionCamera != null )
	{
		if( shouldDoReplay ) // if not doing replay, player's camera should be at their death location.
		{
			player.SetObserverModeStaticPosition( file.intermissionCamera.GetOrigin() )
			player.SetObserverModeStaticAngles( file.intermissionCamera.GetAngles() )
			player.ClearParent() // sometimes they're still parented, do a defensive fix
			if( !IsValid( player.GetParent() ) )
				player.StartObserverMode( OBS_MODE_STATIC_LOCKED )
			player.SetObserverTarget( null )
		}
	}
	*/

	// hack: double check if killcams are enabled and valid here in case gamestate has changed this
	//shouldDoReplay = shouldDoReplay && Replay_IsEnabled() && KillcamsEnabled() && IsValid( attacker )
	// doing a custom check for bleeding out
	shouldDoReplay = shouldDoReplay && Replay_IsEnabled() && KillcamsEnabled() && IsValid( attacker ) && methodOfDeath != eDamageSourceId.bleedout
	// quick note: in cases where player.Die() is called: e.g. for round ends, player == attacker
	if ( shouldDoReplay ) 
	{	
		player.watchingKillreplayEndTime = Time() + replayLength		
		float beforeTime = GetKillReplayBeforeTime( player, methodOfDeath )
		
		replayTracker.validTime <- null 
		
		float respawnTime = Time() - 2 // seems to get the killreplay to end around the actual kill
		if ( "respawnTime" in attacker.s )
			respawnTime = Time() - expect float ( attacker.s.respawnTime )
		
		thread PlayerWatchesKillReplayWrapper( player, attacker, respawnTime, timeOfDeath, beforeTime, replayTracker )		
	}

	player.SetPlayerSettings( "spectator" ) // prevent a crash with going from titan => pilot on respawn
	player.StopPhysics() // need to set this after SetPlayerSettings

	if ( RespawnsEnabled() )
	{
		// is it a good idea to do respawn code in postdeaththread? fuck if i know lol
		float respawnDelay = max( 0, GetCurrentPlaylistVarFloat( "respawn_delay", 0.0 ) - deathcamLength )
	
		print( "respawn delay " + respawnDelay )
		
		UpdateNextRespawnTime( player, Time() + respawnDelay )
		SetRespawnAvailable( player )
		
		wait respawnDelay

		if( file.forcedRespawn && methodOfDeath != damagedef_despawn ) // check for spectator mod
		{
			float waitBeforeRespawn = 0.0
			//if( !shouldDoReplay || respawnDelay >= 3.0 ) // doing this so player can respawn as titan in some modes, but vanilla don't features this lol
			if( !shouldDoReplay )
			{
				waitBeforeRespawn = 3.0 - respawnDelay
				if( waitBeforeRespawn <= 0 )
					waitBeforeRespawn = 0
				thread SetPlayerCameraToIntermissionCam( player, waitBeforeRespawn + 0.1 )
			}
			thread ForcedRespawnThink( player, waitBeforeRespawn )// if not doing replay, set player's camera to intermissionCam

		}

		player.WaitSignal( "RespawnMe" ) // set in base_gametype: ClientCommand_RespawnPlayer
		
		ClearRespawnAvailable( player ) // need so the respawn icon doesn't show for like a frame on next death

		if ( ( expect bool( player.GetPersistentVar( "spawnAsTitan" ) ) && IsTitanAvailable( player ) ) || ( Riff_SpawnAsTitan() > 0 && Riff_ShouldSpawnAsTitan( player ) ) )	// spawn as titan
			thread RespawnAsTitan( player )
		else // spawn as pilot
			RespawnAsPilot( player )
	}
	//else if ( GamePlayingOrSuddenDeath() || GetGameState() == eGameState.Epilogue )
	else if( GetGameState() >= eGameState.Playing ) // respawn not valid, handling all situations
	{
		if ( shouldDoReplay && player.IsWatchingKillReplay() )
			WaitSignal( player, "KillCamOver", "RespawnMe" ) // allows player to skip replay
		
		thread PlayerBecomesSpectator( player )
	}
}

void function SetPlayerCameraToIntermissionCam( entity player, float delay = 0 )
{
	if( delay > 0 )
	{
		player.EndSignal( "OnDestroy" )
		player.EndSignal( "OnDeath" )
		player.EndSignal( "RespawnMe" )
		player.EndSignal( "OnRespawned" )
		player.EndSignal( "PlayerRespawnStarted" )
		//print( "Waiting " + string( delay ) + " s before setting camera" )
		wait delay
	}
	if ( file.intermissionCamera != null )
	{
		//print( "Setting player camera to intermissionCam" )
		player.SetObserverModeStaticPosition( file.intermissionCamera.GetOrigin() )
		player.SetObserverModeStaticAngles( file.intermissionCamera.GetAngles() )
		player.ClearParent() // sometimes they're still parented, do a defensive fix
		if( !IsValid( player.GetParent() ) )
			player.StartObserverMode( OBS_MODE_STATIC_LOCKED )
		player.SetObserverTarget( null )
	}
}

void function ForcedRespawnThink( entity player, float waitBeforeRespawn )
{
	player.EndSignal( "RespawnMe" )
	player.s.isForcedRespawn <- false

	OnThreadEnd(
		function(): ( player )
		{
			if( GetGameState() != eGameState.Playing ) // no forced respawn
				return 
			if( IsValid( player ) )
			{
				if( expect bool( player.s.isForcedRespawn ) ) // reset player's persistent var if respawn is forced
					player.SetPersistentVar( "spawnAsTitan", false )
				player.Signal( "RespawnMe" )
			}
		}
	)
	
	WaitFrame()
	if( !IsValid( player ) )
		return
	if( player.IsWatchingKillReplay() )
		player.WaitSignal( "KillCamOver" )
	if( waitBeforeRespawn > 0 )
		wait waitBeforeRespawn
	player.s.isForcedRespawn = true
}

void function PlayerWatchesKillReplayWrapper( entity player, entity attacker, float timeSinceAttackerSpawned, float timeOfDeath, float beforeTime, table replayTracker )
{
	player.EndSignal( "RespawnMe" )
	player.EndSignal( "OnRespawned" )
	
	player.EndSignal( "OnDestroy" )
	
	svGlobal.levelEnt.EndSignal( "GameStateChanged" )
	
	OnThreadEnd( function() : ( player ) 
	{	
		// don't clear if we're in a roundwinningkillreplay
		if ( IsValid( player ) && !( ( GetGameState() == eGameState.SwitchingSides || GetGameState() == eGameState.WinnerDetermined ) && IsRoundWinningKillReplayEnabled() ) )
		{
			player.Signal( "KillCamOver" )
			player.ClearReplayDelay()
			player.ClearViewEntity()
			SetPlayerCameraToIntermissionCam( player )
			//player.SetPredictionEnabled( true ) doesn't seem needed, as native code seems to set this on respawn
		}
	})
	
	player.SetPredictionEnabled( false )
	PlayerWatchesKillReplay( player, attacker.GetEncodedEHandle(), attacker.GetIndexForEntity(), timeSinceAttackerSpawned, timeOfDeath, beforeTime, replayTracker )
}

void function DecideRespawnPlayer( entity player )
{
	// this isn't even used atm, could likely be removed if some vanilla code didn't rely on it
}

void function RespawnAsPilot( entity player )
{
	if( IsAlive( player ) )
		return

	player.RespawnPlayer( FindSpawnPoint( player, false, ( ShouldStartSpawn( player ) || Flag( "ForceStartSpawn" ) ) && !IsFFAGame() ) )
}

void function RespawnAsTitan( entity player, bool manualPosition = false )
{
	if( IsAlive( player ) )
		return

	player.Signal( "PlayerRespawnStarted" )

	player.isSpawning = true
	entity spawnpoint = FindSpawnPoint( player, true, ( ShouldStartSpawn( player ) || Flag( "ForceStartSpawn" ) ) && !IsFFAGame() )

 	TitanLoadoutDef titanLoadout = GetTitanLoadoutForPlayer( player )
	
	asset model = GetPlayerSettingsAssetForClassName( titanLoadout.setFile, "bodymodel" )
	Attachment warpAttach = GetAttachmentAtTimeFromModel( model, "at_hotdrop_01", "offset", spawnpoint.GetOrigin(), spawnpoint.GetAngles(), 0 )
	PlayFX( TURBO_WARP_FX, warpAttach.position, warpAttach.angle )
		
	entity titan = CreateAutoTitanForPlayer_FromTitanLoadout( player, titanLoadout, spawnpoint.GetOrigin(), spawnpoint.GetAngles() )
	DispatchSpawn( titan )
	player.SetPetTitan( null ) // prevent embark prompt from showing up
	
	AddCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) // hide hud
	// do titanfall scoreevent
	if ( !level.firstTitanfall )
	{
		AddPlayerScore( player, "FirstTitanfall", player )

		#if HAS_STATS
		UpdatePlayerStat( player, "misc_stats", "titanFallsFirst" )
		#endif

		level.firstTitanfall = true
	}
	else
	{
		AddPlayerScore( player, "Titanfall", player )
	}
	
	entity camera = CreateTitanDropCamera( spawnpoint.GetAngles(), < 90, titan.GetAngles().y, 0 > )
	camera.SetParent( titan )
	
	// calc offset for spawnpoint angle
	// todo this seems bad but too lazy to figure it out rn
	//vector xyOffset = RotateAroundOrigin2D( < 44, 0, 0 >, < 0, 0, 0>, spawnpoint.GetAngles().y )
	//xyOffset.z = 520 // < 44, 0, 520 > at 0,0,0, seems to be the offset used in tf2
	//print( xyOffset )
	
	vector xyOffset = RotateAroundOrigin2D( < 44, 0, 520 >, < 0, 0, 0 >, spawnpoint.GetAngles().y )
	
	camera.SetLocalOrigin( xyOffset )
	camera.SetLocalAngles( < camera.GetAngles().x, spawnpoint.GetAngles().y, camera.GetAngles().z > ) // this straight up just does not work lol
	camera.Fire( "Enable", "!activator", 0, player )
	
	player.EndSignal( "OnDestroy" )
	titan.EndSignal( "OnDestroy" )
	OnThreadEnd( function() : ( player, titan, camera )
	{
		if ( IsValid( player ) )
		{
			RemoveCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) // show hud
			player.isSpawning = false
			ClearTitanAvailable( player ) // we've done everything, considering clear titan available
		}
	
		if ( IsValid( titan ) )
			titan.Destroy() // pilotbecomestitan leaves an npc titan that we need to delete
		else
			RespawnAsPilot( player ) // this is 100% an edgecase, just avoid softlocking if we ever hit it in playable gamestates
			
		camera.Fire( "Disable", "!activator", 0, player )
		camera.Destroy()
	})
	
	waitthread TitanHotDrop( titan, "at_hotdrop_01", spawnpoint.GetOrigin(), spawnpoint.GetAngles(), player, camera ) // do hotdrop anim
		
	// temp fix
	if( IsAlive( player ) )
		return

	player.RespawnPlayer( null ) // spawn player as pilot so they get their pilot loadout on embark
	player.SetOrigin( titan.GetOrigin() )
	
	// don't make player titan when entity batteryContainer is not valid.
	// This will prevent a servercrash that sometimes occur when evac is disabled and somebody is calling a titan in the defeat screen.
	if( IsValid( titan.GetTitanSoul().soul.batteryContainer ) )
		PilotBecomesTitan( player, titan ) // make player titan
	else
		print( "batteryContainer is not a valid entity in RespawnAsTitan(). Skipping PilotBecomesTitan()." )
}

void function TryGameModeAnnouncement( entity player, bool doDialogue = true ) // only putting this here because it's here in gametype_sp lol
{
	Remote_CallFunction_NonReplay( player, "ServerCallback_GameModeAnnouncement" )
	if( doDialogue )
		PlayFactionDialogueToPlayer( GameMode_GetGameModeAnnouncement( GAMETYPE ), player )
}

void function SetKillcamsEnabled( bool enabled )
{
	file.killcamsEnabled = enabled
}

bool function KillcamsEnabled()
{
	return file.killcamsEnabled
}

void function SetPlayerDeathsHidden( bool hidden )
{
	file.playerDeathsHidden = hidden
}

void function SetPlayerRespawnForced( bool forced )
{
	file.forcedRespawn = forced
}

void function TrackTitanDamageInPlayerGameStat( int playerGameStat )
{
	file.titanDamageGameStat = playerGameStat
}

void function AddToTitanDamageStat( entity victim, var damageInfo )
{
	if ( !victim.IsTitan() || file.titanDamageGameStat == -1 )
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	float amount = DamageInfo_GetDamage( damageInfo )

	if ( attacker.IsPlayer() && attacker != victim )
		attacker.AddToPlayerGameStat( file.titanDamageGameStat, amount ) // titan damage on 
}

void function CheckForAutoTitanDeath( entity victim, entity attacker, var damageInfo )
{
	if( !IsValid(victim) || !victim.IsTitan() )
		return

	if( !victim.IsPlayer() )
	{
		if (GetPetTitanOwner(victim) && GetPetTitanOwner(victim) != attacker)
			foreach(player in GetPlayerArray())
				Remote_CallFunction_NonReplay( player, "ServerCallback_OnTitanKilled", attacker.GetEncodedEHandle(), victim.GetEncodedEHandle(), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
	}
	else
	{
		if (victim != attacker)
			foreach(player in GetPlayerArray())
				Remote_CallFunction_NonReplay( player, "ServerCallback_OnTitanKilled", attacker.GetEncodedEHandle(), victim.GetEncodedEHandle(), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
	}
}

// stuff to change later

bool function ShouldEntTakeDamage_SPMP( entity ent, var damageInfo )
{
	return true
}

float function GetTitanBuildTime(entity player)
{
	return 100.0
}

void function TitanPlayerHotDropsIntoLevel( entity player )
{

}
