untyped
global function ClassicMP_DefaultDropshipIntro_Setup

const int MAX_DROPSHIP_PLAYERS = 4

global const float DROPSHIP_INTRO_LENGTH = 15.0 // TODO tweak this
const float SPAWN_ON_GROUND_TIME = 11.0 // taken from sequence

struct IntroDropship
{
	entity dropship

	int playersInDropship
	entity[MAX_DROPSHIP_PLAYERS] players
}

struct DropShipSequenceDate
{
	// idle anim
	string idleAnim
	string idlePOVAnim
	string idleAttachment = "ORIGIN"
	bool idleTeleport = true
	bool idleHideProxy = true
	vector idleAngles = < 0, 0, 0 >
	void functionref( entity ) idleViewConeFunc

	// jump anim
	string jumpAnim
	string jumpPOVAnim
	string jumpAttachment = "ORIGIN"
	bool jumpTeleport = false
	bool jumpHideProxy = true
	void functionref( entity ) jumpViewConeFunc
	string firstPersonJumpOutSound // Unfortunately first person anims play for everybody, not just the person who the anim is played upon, so script needs to play the sound as opposed to a qc entry
}

struct 
{
	array<DropShipSequenceDate> dropShipSequenceDateList

	// these used to be IntroDropship[2]s but i wanted to be able to use array.getrandom so they have to be actual arrays
	array<IntroDropship> militiaDropships
	array<IntroDropship> imcDropships
	
	float introStartTime
} file


void function ClassicMP_DefaultDropshipIntro_Setup()
{
	SetPickLoadoutEnabled( true ) // required to make client play warpjump sound
	SetPickLoadoutDuration( 8.0 ) // for dropship intro, we only need set pick loadout duration to fit warpjump sound
	InitIntroDropshipSequenceData()
	AddCallback_OnClientConnected( DropshipIntro_OnClientConnected )	
	AddCallback_GameStateEnter( eGameState.Prematch, OnPrematchStart )
}

void function InitIntroDropshipSequenceData()
{
    DropShipSequenceDate dataForPlayerA
    dataForPlayerA.idleAnim           		= "Classic_MP_flyin_exit_playerA_idle"
    dataForPlayerA.idlePOVAnim        		= "Classic_MP_flyin_exit_povA_idle"
	dataForPlayerA.idleAttachment			= "ORIGIN"
	dataForPlayerA.idleTeleport 			= true
	dataForPlayerA.idleHideProxy 			= true
    dataForPlayerA.idleAngles           	= < 0, -18.0, 0 >
	dataForPlayerA.idleViewConeFunc       	= ViewConeRampFree

	dataForPlayerA.jumpAnim           		= "Classic_MP_flyin_exit_playerA_jump"
    dataForPlayerA.jumpPOVAnim        		= "Classic_MP_flyin_exit_povA_jump"
	dataForPlayerA.jumpAttachment			= "ORIGIN"
	dataForPlayerA.jumpTeleport 			= false
	dataForPlayerA.jumpHideProxy 			= true
	dataForPlayerA.jumpViewConeFunc       	= ViewConeTight
    dataForPlayerA.firstPersonJumpOutSound 	= "commander_sequence_soldier_a_jump"



	DropShipSequenceDate dataForPlayerB
    dataForPlayerB.idleAnim           		= "Classic_MP_flyin_exit_playerB_idle"
    dataForPlayerB.idlePOVAnim        		= "Classic_MP_flyin_exit_povB_idle"
	dataForPlayerB.idleAttachment			= "ORIGIN"
	dataForPlayerB.idleTeleport 			= true
	dataForPlayerB.idleHideProxy 			= true
    dataForPlayerB.idleAngles           	= < 0, 8.0, 0 >
	dataForPlayerB.idleViewConeFunc       	= ViewConeRampFree

	dataForPlayerB.jumpAnim           		= "Classic_MP_flyin_exit_playerB_jump"
    dataForPlayerB.jumpPOVAnim        		= "Classic_MP_flyin_exit_povB_jump"
	dataForPlayerB.jumpAttachment			= "ORIGIN"
	dataForPlayerB.jumpTeleport 			= false
	dataForPlayerB.jumpHideProxy 			= true
	dataForPlayerB.jumpViewConeFunc       	= ViewConeTight
    dataForPlayerB.firstPersonJumpOutSound 	= "commander_sequence_soldier_b_jump"



	DropShipSequenceDate dataForPlayerC
    dataForPlayerC.idleAnim           		= "Classic_MP_flyin_exit_playerC_idle"
    dataForPlayerC.idlePOVAnim        		= "Classic_MP_flyin_exit_povC_idle"
	dataForPlayerC.idleAttachment			= "ORIGIN"
	dataForPlayerC.idleTeleport 			= true
	dataForPlayerC.idleHideProxy 			= true
    dataForPlayerC.idleAngles           	= < 0, 8.0, 0 >
	dataForPlayerC.idleViewConeFunc       	= ViewConeRampFree

	dataForPlayerC.jumpAnim           		= "Classic_MP_flyin_exit_playerC_jump"
    dataForPlayerC.jumpPOVAnim        		= "Classic_MP_flyin_exit_povC_jump"
	dataForPlayerC.jumpAttachment			= "ORIGIN"
	dataForPlayerC.jumpTeleport 			= false
	dataForPlayerC.jumpHideProxy 			= true
	dataForPlayerC.jumpViewConeFunc       	= ViewConeTight
    dataForPlayerC.firstPersonJumpOutSound 	= "commander_sequence_soldier_c_jump"



	DropShipSequenceDate dataForPlayerD
    dataForPlayerD.idleAnim           		= "Classic_MP_flyin_exit_playerD_idle"
    dataForPlayerD.idlePOVAnim        		= "Classic_MP_flyin_exit_povD_idle"
	dataForPlayerD.idleAttachment			= "ORIGIN"
	dataForPlayerD.idleTeleport 			= true
	dataForPlayerD.idleHideProxy 			= true
    dataForPlayerD.idleAngles           	= < 0, -16.0, 0 >
	dataForPlayerD.idleViewConeFunc       	= ViewConeRampFree

	dataForPlayerD.jumpAnim           		= "Classic_MP_flyin_exit_playerD_jump"
    dataForPlayerD.jumpPOVAnim        		= "Classic_MP_flyin_exit_povD_jump"
	dataForPlayerD.jumpAttachment			= "ORIGIN"
	dataForPlayerD.jumpTeleport 			= false
	dataForPlayerD.jumpHideProxy 			= true
	dataForPlayerD.jumpViewConeFunc       	= ViewConeTight
    dataForPlayerD.firstPersonJumpOutSound 	= "commander_sequence_soldier_d_jump"



    file.dropShipSequenceDateList = [ dataForPlayerA, dataForPlayerB, dataForPlayerC, dataForPlayerD ]
}

void function DropshipIntro_OnClientConnected( entity player )
{
	if ( GetGameState() == eGameState.Prematch )
	{
		if ( file.introStartTime + SPAWN_ON_GROUND_TIME < Time() ) // very late joiner, just spawn them onto ground like valinilla
			thread SpawnPlayerOnGround( player )
		else
			thread SpawnPlayerIntoDropship( player )
	}
}

void function OnPrematchStart()
{
	ClassicMP_OnIntroStarted()

	print( "starting dropship intro!" )
	file.introStartTime = Time()
	
	// make 2 empty dropship structs per team
	IntroDropship emptyDropship
	file.militiaDropships.clear()
	file.imcDropships.clear()
	
	array<entity> validDropshipSpawns
	array<entity> dropshipSpawns = GetEntArrayByClass_Expensive( "info_spawnpoint_dropship_start" )
	foreach ( entity dropshipSpawn in dropshipSpawns )
	{
		if ( dropshipSpawn.HasKey( "gamemode_" + GetSpawnpointGamemodeOverride() ) )
			if ( dropshipSpawn.kv[ "gamemode_" + GetSpawnpointGamemodeOverride() ] == "0" )
				continue
		
		validDropshipSpawns.append( dropshipSpawn )
	}
	
	// if no dropship spawns for this mode, just allow any dropship spawns
	if ( validDropshipSpawns.len() < 2 )
		validDropshipSpawns = dropshipSpawns
	
	// spawn dropships
	foreach ( entity dropshipSpawn in validDropshipSpawns )
	{
		// todo: possibly make this only spawn dropships if we've got enough players to need them
		int createTeam = HasSwitchedSides() ? GetOtherTeam( dropshipSpawn.GetTeam() ) : dropshipSpawn.GetTeam() 
		array<IntroDropship> teamDropships = createTeam == TEAM_MILITIA ? file.militiaDropships : file.imcDropships
		
		if ( teamDropships.len() >= 2 )
			continue

		// create entity
		entity dropship = CreateDropship( createTeam, dropshipSpawn.GetOrigin(), dropshipSpawn.GetAngles() )
		
		teamDropships.append( clone emptyDropship )
		teamDropships[ teamDropships.len() - 1 ].dropship = dropship
		
		AddAnimEvent( dropship, "dropship_warpout", WarpoutEffect )
		dropship.SetValueForModelKey( $"models/vehicle/crow_dropship/crow_dropship_hero.mdl" )
		dropship.SetModel( $"models/vehicle/crow_dropship/crow_dropship_hero.mdl" ) 
		
		DispatchSpawn( dropship )
		
		// have to do this after dispatch otherwise it won't work for some reason
		// weirdly enough, tf2 actually does use different dropships for imc and militia, despite these concepts not really being a thing for players in tf2
		// probably was just missed by devs, but keeping it in for accuracy
		if ( dropshipSpawn.GetTeam() == TEAM_IMC )
			dropship.SetModel( $"models/vehicle/goblin_dropship/goblin_dropship_hero.mdl" )
		else
			dropship.SetModel( $"models/vehicle/crow_dropship/crow_dropship_hero.mdl" )
		
		thread PlayAnim( dropship, "dropship_classic_mp_flyin" )
	}
	
	foreach ( entity player in GetPlayerArray() )
	{
		if ( !IsPrivateMatchSpectator( player ) )
			thread SpawnPlayerIntoDropship( player )
		else
			RespawnPrivateMatchSpectator( player )
	}
	
	thread EndIntroWhenFinished()
}

void function EndIntroWhenFinished()
{
	wait 15.0
	ClassicMP_OnIntroFinished()
}

void function SpawnPlayerOnGround( entity player )
{
	player.EndSignal( "OnDestroy" )

	if ( IsAlive( player ) )
		player.Die()

	RespawnAsPilot( player )
	player.FreezeControlsOnServer()
	AddCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING )
	ScreenFadeFromBlack( player, 0.5, 0.5 )

	svGlobal.levelEnt.WaitSignal( "GameStateChanged" ) // wait for game start
	player.UnfreezeControlsOnServer() // restore player movements
	RemoveCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING )
	// do gamemode announcement
	TryGameModeAnnouncement( player )
}

void function SpawnPlayerIntoDropship( entity player )
{
	player.EndSignal( "OnDestroy" )

	if ( IsAlive( player ) )
		player.Die() // kill them so we don't have any issues respawning them later
	
	table results = 
	{
		isJumping = false
	}

	OnThreadEnd( function() : ( player, results )
	{	
		if ( IsValid( player ) )
		{
			player.ClearParent()
			ClearPlayerAnimViewEntity( player )
			if ( !IsAlive( player ) )
				player.Anim_Stop() // stop sequence for dead players
			
			if ( !results.isJumping ) // jumping failed!
			{
				player.MovementEnable()
				player.EnableWeaponViewModel()
				RemoveCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING )
			}
		}
	})
	
	WaitFrame() // do a waitFrame() for other respawn functions set up

	player.EndSignal( "OnDeath" )
	
	// find the player's dropship and seat
	array<IntroDropship> teamDropships
	if ( player.GetTeam() == TEAM_MILITIA )
		teamDropships = file.militiaDropships
	else
		teamDropships = file.imcDropships
	
	IntroDropship playerDropship
	int playerDropshipIndex = -1
	foreach ( IntroDropship dropship in teamDropships )
	{
		for ( int i = 0; i < dropship.players.len(); i++ )
		{
			if ( dropship.players[ i ] == null )
			{
				playerDropship = dropship
				playerDropshipIndex = i
				
				dropship.players[ i ] = player
				break
			}
		}
	}
					
	if ( playerDropship.dropship == null ) // can't find a valid dropship!
	{
		// if we're at this point, we have more players than we do dropships, so just pick a random one
		playerDropship = teamDropships.getrandom()
		playerDropshipIndex = RandomInt( MAX_DROPSHIP_PLAYERS )
	}
	
	// respawn player and holster their weapons so they aren't out
	player.RespawnPlayer( null )
	HolsterAndDisableWeapons(player)
	player.DisableWeaponViewModel()
	
	// hide hud and fade screen out from black
	AddCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING )
	ScreenFadeFromBlack( player, 0.5, 0.5 )
	// faction leaders are done clientside, spawn them here
	Remote_CallFunction_NonReplay( player, "ServerCallback_SpawnFactionCommanderInDropship", playerDropship.dropship.GetEncodedEHandle(), file.introStartTime )

	// get current sequence data
	DropShipSequenceDate data = file.dropShipSequenceDateList[ playerDropshipIndex ]

	// do firstperson idle sequence
	FirstPersonSequenceStruct idleSequence
	idleSequence.firstPersonAnim 	= data.idlePOVAnim
	idleSequence.thirdPersonAnim 	= data.idleAnim
	idleSequence.viewConeFunction 	= data.idleViewConeFunc
	idleSequence.attachment 		= data.idleAttachment
	idleSequence.teleport 			= data.idleTeleport
	idleSequence.hideProxy 			= data.idleHideProxy
	idleSequence.angles				= data.idleAngles
	idleSequence.setInitialTime 	= Time() - file.introStartTime
	thread FirstPersonSequence( idleSequence, player, playerDropship.dropship )
	WaittillAnimDone( player )

	// do jumping sequence along with jumping think
	FirstPersonSequenceStruct jumpSequence
	jumpSequence.firstPersonAnim 	= data.jumpPOVAnim
	jumpSequence.thirdPersonAnim 	= data.jumpAnim
	jumpSequence.viewConeFunction 	= data.jumpViewConeFunc
	jumpSequence.attachment 		= data.jumpAttachment
	jumpSequence.teleport 			= data.jumpTeleport
	jumpSequence.hideProxy 			= data.jumpHideProxy
	jumpSequence.setInitialTime 	= max( 0.0, Time() - ( file.introStartTime + 11.0 ) )  // pretty sure you should do this with GetScriptedAnimEventCycleFrac?
	
	// jumping sound
	EmitSoundOnEntityOnlyToPlayer( player, player, data.firstPersonJumpOutSound )
	PlayBattleChatterLine( player, "bc_pIntroChat" )

	thread FirstPersonSequence( jumpSequence, player, playerDropship.dropship )
	WaittillAnimDone( player ) // somehow this is better than just waiting for the blocking FirstPersonSequence call?
	
	results.isJumping = true
	thread PlayerJumpsFromDropship( player )
}

void function PlayerJumpsFromDropship( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	int moveLockEffect = StatusEffect_AddEndless( player, eStatusEffect.move_slow, 1.0 ) // 1.0 will lock player's movement

	OnThreadEnd( function() : ( player, moveLockEffect )
	{
		if ( IsValid( player ) )
		{
			// defensive fix, restore movements
			StatusEffect_Stop( player, moveLockEffect )
			// show weapon viewmodel and hud
			player.EnableWeaponViewModel()
			DeployAndEnableWeapons(player)
			RemoveCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING )
		}
	})
		
	// wait for intro timer to be fully done
	wait ( file.introStartTime + DROPSHIP_INTRO_LENGTH ) - Time()

	// wait for player to hit the ground
	wait 0.1 // assume players will never actually hit ground before this
	player.ConsumeDoubleJump() // disable double jump

	while ( !player.IsOnGround() && !player.IsWallRunning() && !player.IsWallHanging() ) // todo this needs tweaking
		WaitFrame()

	TryGameModeAnnouncement( player )
}